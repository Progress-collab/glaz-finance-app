name: Deploy Account Types Management v2.3

on:
  push:
    branches: [ main ]
    paths: 
      - 'glaz-finance-app-v2.js'
      - 'account-types-service.js'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy Account Types Management v2.3 to Windows Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        timeout: 60s
        command_timeout: 30s
        debug: true
        script: |
          echo "=== Deploying Account Types Management v2.3 ==="
          echo "Timestamp: $(Get-Date)"
          echo "Working directory: $(Get-Location)"
          
          # Navigate to project directory
          cd C:\glaz-finance-app
          echo "Changed to: $(Get-Location)"
          
          # Create backup before deployment
          echo "Creating backup before deployment..."
          $backupResponse = Invoke-WebRequest -Uri "http://localhost:3000/api/storage/backup" -Method POST -UseBasicParsing
          echo "Backup Status: $($backupResponse.StatusCode)"
          
          # Stop existing processes
          echo "Stopping existing processes..."
          pm2 stop all
          pm2 delete all
          
          # Pull latest changes
          echo "Pulling latest changes from GitHub..."
          git stash
          git clean -fd
          git fetch origin
          git reset --hard origin/main
          
          # Install dependencies
          echo "Installing dependencies..."
          npm install --production --package-lock=false
          
          # Start application with PM2
          echo "Starting application with PM2..."
          pm2 start glaz-finance-app-v2.js --name "glaz-finance-account-types"
          
          # Save PM2 configuration
          pm2 save
          
          # Show status
          echo "=== Application Status ==="
          pm2 list
          pm2 logs --lines 10
          
          # Test endpoints
          echo "=== Testing Account Types System ==="
          echo "Testing health endpoint..."
          $healthResponse = Invoke-WebRequest -Uri "http://localhost:3000/health" -UseBasicParsing
          echo "Health Status: $($healthResponse.StatusCode)"
          $healthContent = $healthResponse.Content | ConvertFrom-Json
          echo "Features: $($healthContent.features -join ', ')"
          
          echo "Testing account types endpoint..."
          $typesResponse = Invoke-WebRequest -Uri "http://localhost:3000/api/account-types" -UseBasicParsing
          echo "Account Types Status: $($typesResponse.StatusCode)"
          $typesContent = $typesResponse.Content | ConvertFrom-Json
          echo "Available Types: $($typesContent.types.Count)"
          
          echo "Testing accounts endpoint..."
          $accountsResponse = Invoke-WebRequest -Uri "http://localhost:3000/api/accounts" -UseBasicParsing
          echo "Accounts Status: $($accountsResponse.StatusCode)"
          $accountsContent = $accountsResponse.Content | ConvertFrom-Json
          echo "Total Accounts: $($accountsContent.accounts.Count)"
          
          # Test account types operations
          echo "=== Testing Account Types Operations ==="
          
          echo "1. Testing add new account type..."
          $newTypeData = @{
            name = "Тестовый тип"
            description = "Тип для тестирования системы"
          } | ConvertTo-Json
          
          $addTypeResponse = Invoke-WebRequest -Uri "http://localhost:3000/api/account-types" -Method POST -Body $newTypeData -ContentType "application/json" -UseBasicParsing
          echo "Add Type Status: $($addTypeResponse.StatusCode)"
          
          echo "2. Testing get account types again..."
          $typesResponse2 = Invoke-WebRequest -Uri "http://localhost:3000/api/account-types" -UseBasicParsing
          $typesContent2 = $typesResponse2.Content | ConvertFrom-Json
          echo "Types Count After Add: $($typesContent2.types.Count)"
          
          echo "3. Testing delete test account type..."
          $testType = $typesContent2.types | Where-Object { $_.name -eq "Тестовый тип" }
          if ($testType) {
            $deleteTypeResponse = Invoke-WebRequest -Uri "http://localhost:3000/api/account-types/$($testType.id)" -Method DELETE -UseBasicParsing
            echo "Delete Type Status: $($deleteTypeResponse.StatusCode)"
          }
          
          echo "4. Testing system type protection..."
          $deleteSystemResponse = Invoke-WebRequest -Uri "http://localhost:3000/api/account-types/checking" -Method DELETE -UseBasicParsing
          echo "Delete System Type Status: $($deleteSystemResponse.StatusCode)"
          if ($deleteSystemResponse.StatusCode -eq 400) {
            echo "✅ System type protection working correctly"
          }
          
          # Show data directory contents
          echo "=== Data Directory Contents ==="
          if (Test-Path "data") {
            $dataFiles = Get-ChildItem -Path "data" | Sort-Object LastWriteTime -Descending
            echo "Total files in data directory: $($dataFiles.Count)"
            $dataFiles | Select-Object Name, Length, LastWriteTime | Format-Table
          } else {
            echo "Data directory not found"
          }
          
          echo "=== Deployment Complete ==="
          echo "Account Types Management v2.3 deployed successfully!"
          echo "External URL: http://195.133.47.134:3000"
          echo "Now supports full account types management with safety features!"
