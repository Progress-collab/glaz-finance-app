name: Deploy to Windows Server (Auto)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        cd backend && npm install
        cd ../frontend && npm install
    
    - name: Run backend tests
      run: |
        cd backend && npm test
    
    - name: Run frontend tests
      run: |
        cd frontend && npm test
    
    - name: Build application
      run: |
        npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install
        cd backend && npm install
        cd ../frontend && npm install
    
    - name: Build application
      run: |
        npm run build
    
    - name: Deploy to Windows Server (Docker)
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: 195.133.47.134
        username: glaz-deploy
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        script: |
          # Check if Docker is available
          if docker --version > /dev/null 2>&1; then
            echo "Docker is available, using Docker deployment"
            
            # Create directory
            mkdir -p C:\glaz-finance-app
            cd C:\glaz-finance-app
            
            # Stop existing containers
            docker-compose down || true
            
            # Clone/update repository
            if [ -d ".git" ]; then
              git pull origin main
            else
              git clone https://github.com/Progress-collab/glaz-finance-app.git .
            fi
            
            # Start with Docker
            docker-compose up -d --build
            
            # Check status
            docker-compose ps
            
          else
            echo "Docker not available, using Node.js deployment"
            
            # Create directory
            mkdir -p C:\glaz-finance-app
            cd C:\glaz-finance-app
            
            # Clone/update repository
            if [ -d ".git" ]; then
              git pull origin main
            else
              git clone https://github.com/Progress-collab/glaz-finance-app.git .
            fi
            
            # Install dependencies
            cd backend && npm install && cd ..
            cd frontend && npm install && cd ..
            
            # Build application
            npm run build
            
            # Start with PM2 or direct Node.js
            npm install -g pm2
            pm2 stop all || true
            pm2 start backend/dist/index.js --name "glaz-finance-backend"
            pm2 start "npm start" --name "glaz-finance-frontend" --cwd frontend
            
            # Save PM2 configuration
            pm2 save
            pm2 startup
            
            # Check status
            pm2 status
          fi

  backup:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Create backup
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: 195.133.47.134
        username: glaz-deploy
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        script: |
          cd C:\glaz-finance-app
          
          # Create backup with timestamp
          $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
          
          # Backup database if using Docker
          if docker --version > /dev/null 2>&1; then
            docker-compose exec -T postgres pg_dump -U glaz_user glaz_finance > "backup_$timestamp.sql"
          fi
          
          # Create archive
          Compress-Archive -Path "backup_*.sql" -DestinationPath "backup_$timestamp.zip" -Force
          
          # Clean old backups (older than 7 days)
          Get-ChildItem -Path "backup_*.zip" | Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-7) } | Remove-Item -Force
